[{"categories":["技术"],"content":"基于Hugo+Github搭建个人博客","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"基于Hugo+Github搭建个人博客 ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"一、安装 对于 Windows 平台，一般是一个zip文件，解压后里面有个 hugo.exe 文件。将该文件所在目录添加到环境变量 path 里，即可在cmd里通过 hugo version 检测是否能正常运行hugo命令。 我的是 Mac 环境，相对简单，使用 homebrew 安装即可，没有安装 homebrew的可以参考MacOS下HomBrew安装教程 brew install hugo 使用hugo version检查是否能正常运行hugo命令 hugo version #hugo v0.100.0+extended darwin/amd64 BuildDate=unknown ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"二、创建站点 首先需要在合适的位置创建一个新的个人站点： hugo new site myblog myblog 就是你的博客站点所在的目录，也是这个站点的根目录，创建站点后目录结构如下： . ├── archetypes ├── content ├── data ├── layouts ├── static ├── themes └── config.toml 下面简单介绍下Hugo根目录下的各个文件目录的作用： archetypes 存放创建文件时使用的模板，可以自定义front matter属性。 content 存放的各种md文件用于部署站点，该目录下可以自行创建若干个子目录来便于对文章进行分类。 data 目录存放的是用于定义变量的模板文件，一般用不到该功能。 layouts 目录存放的模板文件用于渲染html页面，模板里可以定义不同页面的html代码。 static 目录存放的是静态内容：图片、CSS、JavaScript等。 config是配置文件 ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"三、添加主题 为新站点添加一个主题，以我使用的 LoveIt 主题为例，先将主题代码放置到 themes 目录下： cd myblog git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"四、基本配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"五、新建文章 新建一篇文章： hugo new posts/first.md 该命令会在 content/posts 目录下生成 first.md 文件，打开进行编辑： --- title: \"XXX\" date: 2022-08-10T13:45:43+08:00 draft: false description: \"XXX\" tags: [\"XXX\",\"XXX\",\"XXX\"] categories: [\"XXX\"] lightgallery: true toc: auto: false --- ## 我的第一篇文章 我的第一篇文章 两行 --- 里的属性是 front matter，用来设置当前文章的属性配置，如上是我经常使用的配置。 平时写博客，把写好的markdown文档放到这个 content/posts 目录就可以了，记得在开头加上 front matter ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"六、启动Hugo服务 hugo server -D 在本地启动服务后可以在 http://localhost:1313/ 访问个人站点。该命令仅用于本地调试，支持热修改，也就是说在启动服务时修改文章会实时生效，但是该命令不会真正生成静态文件。 ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"七、生成静态页面 输入命令： hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源，现在可以将其部署在任何 Web 服务器上。 但我习惯上会加上指定主题（如果有多个主题）等内容： hugo --theme=LoveIt --baseUrl=\"https://XXX.github.io\" ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"八、远程部署到Github Pages ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"1 在GitHub上创建一个仓库 首先在GitHub上创建一个仓库，仓库的名字格式为\u003cusername\u003e.github.io。比如我的GitHub用户名是 wcmsues，那么这个仓库就命名为 wcmsues.github.io。 之所以这样规定命名，是因为GitHub默认会把 \u003cusername\u003e.github.io 的master分支的内容部署到 GitHub Pages 站点上。 ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:1","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"2 SSH key的创建与配置 因为要使用SSH的方式来和GitHub仓库进行交互，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。详细内容可看我之前发的SSH key的创建与配置，这里我只简单讲必要的步骤 生成密钥 cd ~/.ssh/ ssh-keygen -t rsa -C \"你的邮箱xxx@xx.com\" ⚠️注意：当出现下面这一句时，需要给新的密钥起名字，比如：id_rsa Generating public/private rsa key pair. Enter file in which to save the key (～/.ssh/id_rsa): id_rsa 然后不用填写，一路回车就行 验证密钥是否生成 ls ~/.ssh/ 显示id_rsa、id_rsa.pub 说明创建密钥成功 milo@MilodeMacBook-Pro ~ %ls ~/.ssh/ config id_rsa id_rsa.pub 配置密钥 查看.ssh/根路径下, 有没有config文件,没有则创建一个config文件(config本身无后缀名) touch config 用Text打开config open -a TextEdit config 写入如下配置 Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa 添加到SSH agent 先清空本地的 SSH 缓存 ssh-add -D 添加新的 SSH 密钥 到 SSH agent中 ssh-add id_rsa 新的SSH-GitHub 在.ssh目录下找到创建的新的公钥id_rsa_c.pub，用Text打开它，并把里面的内容复制 open -a TextEdit id_rsa_c.pub 打开新GitHub账号主页 Settings —\u003e SSH and GPG keys —\u003e 点击New SSH key title可以随便填，将刚复制的内容粘贴到Key那里，点击Add Key保存即可 然后回到命令行验证一下是不是设置好了 ssh -T git@github.com #密钥的ssh_key验证 如果显示下方文字，说明成功 Hi wcmsues! You've successfully authenticated, but GitHub does not provide shell access. ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:2","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"3 部署到Github Pages 第一次发布，执行下方脚本 # 生成静态文件 hugo --theme=LoveIt --baseUrl=\"https://wcmsues.github.io\" # 进入生成的文件夹 cd public # 基本操作 git init git add . git commit -m 'firstcommit' #只在第一次部署时运行 git remote add origin git@github.com:wcmsues/wcmsues.github.io.git # 发布只在第一次部署时带-u git push -u origin master 从第二次发布开始，执行下方脚本即可 # 生成静态文件 hugo --theme=LoveIt --baseUrl=\"https://wcmsues.github.io\" # 进入生成的文件夹 cd public # 基本操作 git init git add -A git commit -m 'deploy' # 如果发布到 https://\u003cUSERNAME\u003e.github.io git push git@github.com:wcmsues/wcmsues.github.io.git master ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:8:3","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"九、美化配置 可以参考 Lovelt主题 Lewis的Hugo-Lovelt主题美化 最终我的基于Hugo+Github搭建的个人博客：Milo’s Blog 慢慢美化配置好之后，就不用动了，我平时也就写写md文件，放到 content/posts 目录，开头加上 front matter，然后用脚本上传。 ","date":"2022-08-11","objectID":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["Hugo","Github Pages","Github","博客"],"title":"基于Hugo+Github搭建个人博客","uri":"/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"从零搭建基于VuePress的文档博客","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"从零搭建基于VuePress的文档博客 本文会帮助你从头搭建一个简单的 VuePress 文档，并且做一些简单的配置。 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:0:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"一、前提条件 VuePress 需要 Node.js \u003e= 8.6 直接点击下载，或者在DOWNLOADS里按需下载即可 安装好后，查看nodejs版本 node ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:1:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"二、快速上手 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:2:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"1.创建并进入一个新目录 mkdir vuepress-milo \u0026\u0026 cd vuepress-milo ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:2:1","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"2.使用你喜欢的包管理器进行初始化 yarn init # npm init 初始化过程如无特殊需要，一路回车即可 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:2:2","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"3.将 VuePress 安装为本地依赖 不再推荐全局安装 VuePress yarn add -D vuepress # npm install -D vuepress ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:2:3","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"4.创建docs文件夹，和一篇md文档 mkdir docs \u0026\u0026 echo '# Hello VuePress' \u003e docs/README.md ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:2:4","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"5.在 package.json 中添加一些 scripts 这里推荐用vscode打开后编辑 code . 这一步骤是可选的，但我们推荐你完成它。 { \"scripts\": { \"docs:dev\": \"vuepress dev docs\", \"docs:build\": \"vuepress build docs\" } } ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:2:5","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"6.在本地启动服务器 yarn docs:dev # npm run docs:dev ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:2:6","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"三、基本设置 此时的文档博客很丑，下一步我们需要做一些基本配置 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:3:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"1.目录结构设置 VuePress 遵循 “约定优于配置” 的原则，推荐的目录结构如下： . ├── docs │ ├── .vuepress │ │ ├── public │ │ ├── styles │ │ │ └── palette.styl │ │ └── config.js │ ├── pages │ └── README.md │ └── package.json ⚠️建议：先把这些都创建好，然后在再写入内容 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:3:1","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"2.public静态资源目录 docs/.vuepress/public: 静态资源目录，这里我放了图片作为页面主图和偏爱图标 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:3:2","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"3.重写默认颜色常量 docs/.vuepress/styles/palette.styl: 用于重写默认颜色常量，或者设置新的 stylus 颜色常量 默认是绿色，我这里更改为蓝色 默认页面有点窄，这里更改为900px宽度 // 颜色 $accentColor = #235DC8 // 页面设置 .page .theme-default-content:not(.custom){ max-width: 900px!important; } ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:3:3","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"4.config基本设置 docs/.vuepress/config.js: 配置文件的入口文件，也可以是 YML 或 toml，这里简单设置了网站标题、网站描述、偏爱图标。 module.exports = { // 网站标题 title: 'Milo的学习笔记', // 网站描述 description: '拒绝重复造轮子', // 偏爱图标 head: [ ['link', { rel: 'icon', href: '/aniya.png' }] ], } ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:3:4","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"5.首页设置 默认的主题提供了一个首页（Homepage）的布局，需要在你的根级 README.md 指定 home: true。以下是一个如何使用的例子： --- home: true heroImage: /aniya.webp heroText: Milo的学习笔记 tagline: 无比热爱，来日方长！ actionText: Milo的周记 → actionLink: / features: - title: 科研之路 details: 主攻推荐系统、知识图谱，拒绝重复造轮 - title: 目前现状 details: 目前在读研二，本科和研究生都就读于上海工程技术大学，论文撰写中。 - title: 短期规划 details: 完成毕业论文，发表两篇中文核心。 # footer: MIT Licensed | Copyright © 2018-present Evan You --- 然后重新启动本地服务 yarn docs:dev ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:3:5","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"四、pages存放markdown文档 docs/pages 用于存放markdown文件，例如pages中有以下几个md文件 . └── pages ├── codes ├── papers │ ├── kg │ ├── rs │ └── rskg │ ├── AKGE.md │ ├── DKN.md │ ├── KGAT.md │ ├── KGCN.md │ ├── KGNN-LS.md │ ├── MKR.md │ ├── NGCF.md │ ├── RippleNet.md │ └── start.md └── weekly ├── 20220822.md └── start.md ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:4:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"五、导航栏设置 在 docs/.vuepress/config.js 基本设置的基础上，添加导航栏设置 module.exports = { // 网站标题 // 网站描述 // 偏爱图标 // 导航栏与侧边栏设置 themeConfig: { // logo设置 logo: '/aniya.png', // 导航栏设置 nav: [ { text: '首页', link: '/' }, { text: '推荐系统', ariaLabel: 'recommender systems', items: [ { text: '基础知识', link: '/' }, ] }, { text: '知识图谱', ariaLabel: 'knowledge graph', items: [ { text: '基础知识', link: '/' }, ] }, { text: '相关论文', ariaLabel: 'papers', items: [ { text: '论文学习', link: '/pages/papers/rskg/start.md' }, { text: '源码学习', link: '/' }, ] }, { text: '我的论文', ariaLabel: 'mypaper', items: [ { text: '论文1', link: '/' }, { text: '论文2', link: '/' }, { text: '论文3', link: '/' }, ] }, ], //侧边栏设置（后面讲） } } 然后重新启动本地服务 yarn docs:dev ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:5:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"六、侧边栏设置 在 docs/.vuepress/config.js 基本设置与导航栏设置的基础上，添加侧边栏设置 module.exports = { // 网站标题 // 网站描述 // 偏爱图标 // 导航栏与侧边栏设置 themeConfig: { // logo设置 logo: '/aniya.png', // 导航栏设置 // 侧边栏设置 sidebar: { // 周报 '/pages/weekly/': [ { title: 'Milo的学习周报', // 必要的 collapsable: true, // 是否可折叠, 默认值是 true, sidebarDepth: 2, // 侧边栏深度, 默认值是1 children: [ 'start', '20220822', ] }, ], // 推荐系统\u0026\u0026知识图谱 '/pages/papers/': [ { title: '推荐系统\u0026\u0026知识图谱', // 必要的 collapsable: true, // 是否可折叠, 默认值是 true, sidebarDepth: 2, // 侧边栏深度, 默认值是 1 children: [ 'rskg/start', 'rskg/DKN', 'rskg/RippleNet', 'rskg/MKR', 'rskg/KGCN', 'rskg/KGNN-LS', 'rskg/NGCF', 'rskg/AKGE', 'rskg/KGAT', ] }, { title: '知识图谱', // 必要的 collapsable: true, // 是否可折叠, 默认值是 true, sidebarDepth: 2, // 侧边栏深度, 默认值是 1 children: [ ] }, { title: '推荐系统', // 必要的 collapsable: true, // 是否可折叠, 默认值是 true, sidebarDepth: 2, // 侧边栏深度, 默认值是 1 children: [ ] }, ], }, } } 然后重新启动本地服务 yarn docs:dev ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:6:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"七、总结 安装nodejs 创建并进入一个新目录 使用你喜欢的包管理器进行初始化 将 VuePress 安装为本地依赖 创建docs文件夹，和一篇md文档 在 package.json 中添加一些 scripts 目录结构设置 public静态资源目录 重写默认颜色常量 config基本设置 首页设置 pages存放markdown文档 导航栏设置 侧边栏设置 自此所有基本操作都已完成，大家可根据此文章搭建属于自己的文档博客 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:7:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"其他案例 Milo的前端日记 ","date":"2022-08-10","objectID":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/:8:0","tags":["Vuepress","markdown","博客"],"title":"从零搭建基于VuePress的文档博客","uri":"/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Evuepress%E7%9A%84%E6%96%87%E6%A1%A3%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"SSH key密钥的创建与配置","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"SSH key密钥的创建与配置 因为要使用SSH的方式来和GitHub仓库进行交互，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。 ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:0:0","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"一、创建密钥 ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:1:0","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"1 先查看当前已有的密钥 [老密钥] ls ~/.ssh/ 显示 id_rsa 与 id_rsa.pub 说明已经有一对密钥，如果需要可以删除重新创建，或者创建新的与之名字不同的密钥。 milo@MilodeMacBook-Pro ~ %ls ~/.ssh/ config id_rsa id_rsa.pub ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:1:1","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"2 生成新的密钥 [新密钥] cd ~/.ssh/ ssh-keygen -t rsa -C \"你的邮箱xxx@xx.com\" ⚠️注意：当出现下面这一句时，需要给新的密钥起名字，比如：id_rsa Generating public/private rsa key pair. Enter file in which to save the key (～/.ssh/id_rsa): id_rsa 然后不用填写，一路回车就行 ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:1:2","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"3 验证密钥是否生成 ls ~/.ssh/ 显示id_rsa、id_rsa.pub 说明创建密钥成功 milo@MilodeMacBook-Pro ~ %ls ~/.ssh/ config id_rsa id_rsa.pub ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:1:3","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"二、配置密钥 查看.ssh/根路径下, 有没有config文件,没有则创建一个config文件(config本身无后缀名) touch config ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:2:0","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"1 用Text打开config open -a TextEdit config ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:2:1","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"2 写入如下配置 Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:2:2","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"3 添加到SSH agent 先清空本地的 SSH 缓存 ssh-add -D 添加新的 SSH 密钥 到 SSH agent中 ssh-add id_rsa ⚠️注意：如果出现错Could not open a connection to your authentication agent.，先执行ssh-agent bash，再执行以上命令，虽然我没遇到这个错误。 ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:2:3","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"4 新的SSH-GitHub 之前我们生成新密钥的时候执行了cd ~/.ssh/，所以我们当前应该在.ssh目录下 在.ssh目录下找到创建的新的公钥id_rsa_c.pub，用Text打开它，并把里面的内容复制 open -a TextEdit id_rsa_c.pub 打开新GitHub账号主页 Settings —\u003e SSH and GPG keys —\u003e 点击New SSH key title可以随便填，将刚复制的内容粘贴到Key那里，点击Add Key保存即可 然后回到命令行验证一下是不是设置好了 ssh -T git@github.com #密钥的ssh_key验证 如果显示下方文字，说明成功 Hi wcmsues! You've successfully authenticated, but GitHub does not provide shell access. ⚠️注意：如果没有验证成功，就再执行一遍上述过程 ","date":"2022-08-02","objectID":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/:2:4","tags":["SSH","密钥","Github"],"title":"SSH key密钥的创建与配置","uri":"/ssh-key%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"categories":["技术"],"content":"MacOS如何生成目录树？","date":"2022-07-07","objectID":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/","tags":["homebrew","markdown","目录树"],"title":"MacOS如何生成目录树？","uri":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/"},{"categories":["技术"],"content":"MacOS如何生成目录树？ 在一个项目的 README 中，我们往往会想把项目的目录结构进行一下介绍或者注释，这样方便其他人接手项目时快速熟悉，同时也方便自己回忆起项目结构。那么效果比较好的呈现方式自然就是目录树，如何快速生成项目的目录树呢？ 我们第一反应是 tree 命令，可 MacOS 并不自带 tree 命令，所以需要手动安装！ ","date":"2022-07-07","objectID":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/:0:0","tags":["homebrew","markdown","目录树"],"title":"MacOS如何生成目录树？","uri":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/"},{"categories":["技术"],"content":"HomeBrew 安装 tree 用 homebrew 安装最方便，没有 brew 的 mac 用户，或者下载失败的，可以看我之前那篇文章 MacOS下HomBrew安装教程 安装好 homebrew 后，直接安装 tree brew install tree ","date":"2022-07-07","objectID":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/:1:0","tags":["homebrew","markdown","目录树"],"title":"MacOS如何生成目录树？","uri":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/"},{"categories":["技术"],"content":"使用 tree 我们先 cd 到要生存目录树的文件夹，然后使用 tree ","date":"2022-07-07","objectID":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/:2:0","tags":["homebrew","markdown","目录树"],"title":"MacOS如何生成目录树？","uri":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/"},{"categories":["技术"],"content":"输出指定层级的目录树 直接使用 tree 命令，它会把所有层级都输出，但如果我们只要输出 2 个层级就可以了，那么可以这样使用 // -L level 表示只会遍历到指定层级 tree -L 2 ","date":"2022-07-07","objectID":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/:3:0","tags":["homebrew","markdown","目录树"],"title":"MacOS如何生成目录树？","uri":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/"},{"categories":["技术"],"content":"忽略某些文件夹输出目录树 前端项目基本都会有这个问题，就是会把 node_modules 也输出成目录树，一下子目录树会无比巨大，而且一般我们也并不需要输出这个文件夹下的内容，那么可以这样使用 // -I pattern 表示不会将匹配到的文件/文件夹输出，即类似 ignore 的功能 tree -I node_modules 其他命令，可以通过 tree --help 来查看需要的参数 ","date":"2022-07-07","objectID":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/:4:0","tags":["homebrew","markdown","目录树"],"title":"MacOS如何生成目录树？","uri":"/macos%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91/"},{"categories":["工具"],"content":"MacOS 使用 npm 安装 SASS 与使用教程","date":"2022-07-06","objectID":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","tags":["CSS","SASS","npm"],"title":"MacOS 使用 npm 安装 SASS 与使用教程","uri":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"MacOS 使用 npm 安装 SASS 与使用教程 这里 Milo 使用 npm 来安装 sass 并使用，比较方便快捷 ","date":"2022-07-06","objectID":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:0:0","tags":["CSS","SASS","npm"],"title":"MacOS 使用 npm 安装 SASS 与使用教程","uri":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"1 npm 的安装 首先确保你有node.js，才能使用npm npm是Node.js (opens new window)默认的软件包管理系统，安装完node后，会默认安装好npm 我用的homebrew在我的Mac上安装的node brew install node 然后用命令查看node版本和npm版本 node -v //v18.2.0 npm -v //8.9.0 使用命令npm install -g全局安装npm，会默认更新最新版本 ","date":"2022-07-06","objectID":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["CSS","SASS","npm"],"title":"MacOS 使用 npm 安装 SASS 与使用教程","uri":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"2 sass 的安装 使用命令 npm i npm -g 全局安装 npm，会默认更新最新版本 npm install -g sass 然后用命令查看sass版本 sass --version //1.53.0 compiled with dart2js 2.17.3 ","date":"2022-07-06","objectID":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","tags":["CSS","SASS","npm"],"title":"MacOS 使用 npm 安装 SASS 与使用教程","uri":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"3 sass 的使用方法 首先要创建2个文件夹，比如sass、css 在终端启动监听命令，这里的sass:css 就是你两个文件夹的名字 sass --watch sass:css 在sass文件夹创建.scss文件，在.scss文件写入css，另一个css文件夹就会自动出现.css文件 ","date":"2022-07-06","objectID":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","tags":["CSS","SASS","npm"],"title":"MacOS 使用 npm 安装 SASS 与使用教程","uri":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"4 sass 教程 详细内容可看 Sass中文网 ","date":"2022-07-06","objectID":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:4:0","tags":["CSS","SASS","npm"],"title":"MacOS 使用 npm 安装 SASS 与使用教程","uri":"/macos-%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-sass-%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"MacOS HomBrew 安装教程 完美解决方案","date":"2022-07-04","objectID":"/macos%E4%B8%8Bhombrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","tags":["homebrew"],"title":"MacOS下HomBrew安装教程","uri":"/macos%E4%B8%8Bhombrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"MacOS HomBrew 安装教程 完美解决方案 ","date":"2022-07-04","objectID":"/macos%E4%B8%8Bhombrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:0:0","tags":["homebrew"],"title":"MacOS下HomBrew安装教程","uri":"/macos%E4%B8%8Bhombrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"自动脚本(全部国内地址)（复制下面一句脚本到终端中粘贴回车) 苹果电脑 常规安装脚本（几分钟安装完成）： /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\" MacOS 打开终端 复制粘贴 5个序号随便选，我之前从第一个试到5阿里才成功 苹果电脑 卸载脚本： /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)\" 常见错误去下方地址查看 https://gitee.com/cunkai/HomebrewCN/blob/master/error.md ","date":"2022-07-04","objectID":"/macos%E4%B8%8Bhombrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:1:0","tags":["homebrew"],"title":"MacOS下HomBrew安装教程","uri":"/macos%E4%B8%8Bhombrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":["前端"],"content":"React从入门到精通","date":"2022-06-15","objectID":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/","tags":["前端","React"],"title":"React从入门到精通","uri":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":" 📢 大家好 ，我是Milo同学，最近在学习 React，是我学习的第一个框架 先附上React官网 ，有很多问题都要通过查询官方文档来解决，要学会查文档。 ","date":"2022-06-15","objectID":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:0:0","tags":["前端","React"],"title":"React从入门到精通","uri":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"介绍 此项目为Milo在学习React的过程中记录的 笔记 和 源码 ，视频看的是B站尚硅谷天禹老师的React全家桶，笔记参考了小丞大佬的学习笔记，综合整理了笔记、源码code和相关面试题，面试题后面会持续更新，也会单独建立一个项目。 ","date":"2022-06-15","objectID":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:1:0","tags":["前端","React"],"title":"React从入门到精通","uri":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"其他地址 Github：https://github.com/Milo980412/NOTE_REACT 语雀：https://www.yuque.com/u26476221/il2ap7 Milo前端日记：React入门学习 ","date":"2022-06-15","objectID":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:2:0","tags":["前端","React"],"title":"React从入门到精通","uri":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"目录 React 基础 01_基础知识以及 jsx语法 hello_react 虚拟DOM的两种创建方式 jsx语法规则 jsx的小练习 02_面向组件编程 react中定义组件 组件实例三大属性1_state 组件实例三大属性2_props 组件实例三大属性3_refs react中的事件处理 react中收集表单数据 高阶函数_函数柯里化 03_组件的生命周期 04_DOM的Diffing算法 React 脚手架 05_初始化脚手架 06_TodoList 案例 07_脚手架配置代理 08_Github 搜索案例 09_消息订阅发布 10_React 路由 11_React 路由传参数 12_React 路由跳转 13_antd 的基本使用 14_redux 基本使用 15_React-Redux 基本使用 16_数据共享 17_React 扩展 React-Hooks React核心 – React-Hooks ","date":"2022-06-15","objectID":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:3:0","tags":["前端","React"],"title":"React从入门到精通","uri":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"参考 笔记来源 尚硅谷React技术全家桶全套完整版（零基础入门到精通/男神天禹） 笔记参考 小丞的前端日记 ","date":"2022-06-15","objectID":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:4:0","tags":["前端","React"],"title":"React从入门到精通","uri":"/react%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["技术"],"content":"解决一台电脑实现多个Github账号发布博客","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"解决一台电脑实现多个Github账号发布博客 Milo之前在自己的GitHub Pages 搭建 Hugo 静态博客网站，Hugo写博客挺好，但是放一些比较多的学习笔记、文档什么的很麻烦，接触到vuepress，非常适合做我的在线文档和笔记记录的地方。 于是Milo想再申请一个账号搭建一个新的vuepress博客，我想在同一台mac上完成两个博客的更新，但因为每次都要重新删github在mac上存留的密码，十分麻烦，所以今天一次性解决它，顺便记录下来分享给大家。 ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:1:0","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"Hugo/Vuepress + Github Pages 相信很多同学都用Hugo/Vuepress + Github Pages搭建个人博客，其实用什么都行，Hexo、Halo等 ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:2:0","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"关于Github Pages GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，可以在 GitHub 仓库里托管和发布自己的静态网站页面；Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页 ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:2:1","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"关于Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。 我选择hugo写博客，主要原因是因为它快！ ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:2:2","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"关于Vuepress VuePress 需要nodejs，非常适合书写技术文档 ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:2:3","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"我的环境 操作系统：macOS Catalina 版本10.15.4 我的Hugo博客：hugo博客 我的Vuepress博客：vuepress博客 ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:2:4","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"解决思路 思路就是：管理两个SSH key ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:3:0","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"1 密钥/Git配置 1.1 创建新的密钥 先查看当前已有的密钥 [老密钥] ls ~/.ssh/ 显示id_rsa 与 id_rsa.pub说明已经有一对密钥 milo@MilodeMacBook-Pro ~ %ls ~/.ssh/ config id_rsa id_rsa.pub ⚠️注意：如果没有 [老密钥]，就生成两个**[新密钥]**即可，一个叫id_rsa，另一个叫id_rsa_c 生成新的密钥 [新密钥] cd ~/.ssh/ ssh-keygen -t rsa -C \"你的邮箱xxx@xx.com\" ⚠️注意：当出现下面这一句时，需要给新的密钥起名字，比如：id_rsa_c Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): id_rsa_c 然后不用填写，一路回车就行 验证密钥是否生成 ls ~/.ssh/ 显示id_rsa、id_rsa.pub与id_rsa_c、id_rsa_c.pub说明已经有两对密钥 milo@MilodeMacBook-Pro ~ %ls ~/.ssh/ config id_rsa id_rsa.pub id_rsa_c id_rsa_c.pub 1.2 配置两个密钥 查看.ssh/根路径下, 有没有config文件,没有则创建一个config文件(config本身无后缀名) touch config 用Text打开config open -a TextEdit config 写入如下配置 #第一个账号，默认使用的账号，不用做任何更改 Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa #第二个新账号，#\"xxxxx\"为前缀名，可以任意设置，要记住，后面需要用到 Host xxxxx.github.com HostName github.com User git IdentityFile ~/.ssh/这里是你创建的新密钥的名称 例如 Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa Host vue.github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa_c 1.3 添加到SSH agent 先清空本地的 SSH 缓存 ssh-add -D 添加新的 SSH 密钥 到 SSH agent中 ssh-add xxxxxx #旧密钥名称，一般是id_rsa ssh-add xxxxxx #新创建的密钥名称 例如 ssh-add id_rsa ssh-add id_rsa_c ⚠️注意：如果出现错Could not open a connection to your authentication agent.，先执行ssh-agent bash，再执行以上命令，虽然我没遇到这个错误😄 1.4 新的SSH-GitHub 之前我们生成新密钥的时候执行了cd ~/.ssh/，所以我们当前应该在.ssh目录下 milo@MilodeMacBook-Pro ~/.ssh % 在.ssh目录下找到创建的新的公钥id_rsa_c.pub，用Text打开它，并把里面的内容复制 open -a TextEdit id_rsa_c.pub 打开新GitHub账号主页 Settings —\u003e SSH and GPG keys —\u003e 点击New SSH key title可以随便填，将刚复制的内容粘贴到Key那里，点击Add Key保存即可 然后回到命令行验证一下是不是设置好了 ssh -T git@github.com #老密钥的ssh_key验证 ssh -T git@xxxxxxx.github.com #新密钥的ssh_key验证 例如 ssh -T git@github.com #老密钥的ssh_key验证 Hi Milo980412! You've successfully authenticated, but GitHub does not provide shell access. ssh -T git@vue.github.com #新密钥的ssh_key验证 Hi MiloReact! You've successfully authenticated, but GitHub does not provide shell access. ⚠️注意：如果**[老密钥]没有验证成功，把[老密钥]**也执行一遍上述过程 1.5 Git配置更改 如果已经设置了全局，取消全局用户名和邮箱配置 git config --global --unset user.name git config --global --unset user.email ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:3:1","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["技术"],"content":"2 Hugo和Vuepress设置 这边讲一下怎么在博客（本地仓库）使用我们配置好的两个SSH Key 2.1 重新设置Git配置 设置全局用户名和邮箱配置 git config --global user.name XXXX git config --global user.email XXXX 例如 git config --global user.name \"Milo980412\" git config --global user.email XXX@XX.com ⚠️注意：1.5 Git配置更改 中如果全局设置没啥问题的 1.5中就不用更改了，这里也不用重新设置了 2.2 Git命令push博客项目 一般我们push更新Hugo博客内容的流程是 # 生成静态文件 hugo --theme=LoveIt --baseUrl=\"https://wcmsues.github.io\" # 进入生成的文件夹 cd public # 创建本地代码仓库 git init # 将修改的文件保存到暂存区 git add -A # 需要将文件提交到本地仓库 git commit -m 'deploy' # 推送代码，如果发布到 https://\u003cUSERNAME\u003e.github.io git push -f git@github.com:wcmsues/wcmsues.github.io.git master 一般我们push更新Vuepress博客内容的流程是 # 生成静态文件 npm run docs:build # 进入生成的文件夹 cd docs/.vuepress/dist # 创建本地代码仓库 git init # 将修改的文件保存到暂存区 git add -A # 需要将文件提交到本地仓库 git commit -m 'deploy' # 如果发布到 https://\u003cUSERNAME\u003e.github.io git push -f git@github.com:MiloReact/MiloReact.github.io.git master ⚠️注意：**[老密钥]的push没有区别，但是[新密钥]**的push有一点不同 这里我的vuepress是我的**[新密钥]，在git push时，git地址要写我们在1.2 配置两个密钥**时带有前缀的vue.github.com，如下所示 git push -f git@vue.github.com:MiloReact/MiloReact.github.io.git master 谁是新密钥就改谁的push命令就行，到此为止就解决了一台电脑实现多个Github账号发布博客 2.3 小建议 我不太喜欢用自动化部署，我喜欢用脚本，比如我在博客项目根目录创建一个deploy.sh文件，命令如下 Hugo # 生成静态文件 hugo --theme=LoveIt --baseUrl=\"https://wcmsues.github.io\" # 进入生成的文件夹 cd public # 创建本地代码仓库 git init # 将修改的文件保存到暂存区 git add -A # 需要将文件提交到本地仓库 git commit -m 'deploy' # 推送代码，如果发布到 https://\u003cUSERNAME\u003e.github.io git push -f git@github.com:wcmsues/wcmsues.github.io.git master Vuepress # 生成静态文件 npm run docs:build # 进入生成的文件夹 cd docs/.vuepress/dist # 创建本地代码仓库 git init # 将修改的文件保存到暂存区 git add -A # 需要将文件提交到本地仓库 git commit -m 'deploy' # 如果发布到 https://\u003cUSERNAME\u003e.github.io git push -f git@vue.github.com:MiloReact/MiloReact.github.io.git master 执行脚本完成push更新 ./deploy.sh ","date":"2022-06-10","objectID":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/:3:2","tags":["Github Pages","Git","Hugo","Vuepress","博客"],"title":"解决一台电脑实现多个Github账号发布博客","uri":"/mac%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%8F%91%E5%B8%83%E5%A4%9A%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"categories":["工具"],"content":"npm基本命令","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"NPM是什么？ 它是一个命令行工具，npm已经被全球超过1100万开发人员所依赖，- 拥有超过一百万个软件包，是世界上最大的软件注册表。也可以形象的理解为一个应用商城，我们可以在里面下载各种已经编写好的代码，像常用的jQuery，webpack等等。官网链接(opens new window) ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:1:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"NPM的安装 npm是Node.js (opens new window)默认的软件包管理系统，安装完node后，会默认安装好npm 我用的homebrew在我的Mac上安装的node brew install node 然后用命令查看node版本和npm版本 node -v //v18.2.0 npm -v //8.9.0 使用命令npm i npm -g全局安装npm，会默认更新最新版本 ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:2:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"NPM 的基本使用 npm -v ：通过==查看版本==，看npm是否安装成功 npm install \u003cModule Name\u003e： 使用 npm命令==安装模块==，例如npm install jquery npm uninstall \u003cModule Name\u003e： 使用命令==卸载模块==，例如npm uninstall jquery npm update \u003cModule Name\u003e： 使用命令==更新模块==，例如npm update jquery npm install \u003cModule Name\u003e -g ： 可以直接在命令行里使用，安装在==全局== npm list -g：查看所有全局安装的模块 npm list vue：查看某个模块的==版本号== npm -g install npm@5.9.1：（@后跟版本号）这样我们就可以更新npm版本，==指定安装版本号== npm install -save moduleName：-save 在package文件的dependencies节点写入依赖。默认值 npm install -save-dev moduleName ：-save-dev 在package文件的devDependencies节点写入依赖 dependencies：==运行时==的依赖，发布后，即生产环境下还需要用的模块 devDependencies：==开发时==的依赖。里面的模块是开发时用的，发布时用不到它。 ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:3:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"NPM 镜像的设置和查看 查看镜像配置结果 ：npm config get registry 将npm设置为淘宝镜像：npm config set registry https://registry.npm.taobao.org --global 使用nrm工具切换淘宝源：npx nrm use taobao 切换到官方源：npx nrm use npm ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:4:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"Package.json 属性说明 name ：包名。 version ：包的版本号。 description ：包的描述。 homepage ：包的官网 url 。 author ：包的作者姓名。 dependencies ：依赖包列表 repository：包代码存放的地方的类型。 main ：main 字段指定了程序的主入口文件，require('moduleName')就会加载这个文件。 keywords ：关键字 注意： package.json文件中版本号的说明，安装的时候代表不同的含义： “7.14.0” 表示安装指定的7.14.0版本 “~7.14.0” 表示安装 7.0.x 中最新的版本 “^7.14.0” 表示安装7.x.x中最新的版本 ==特别注意==：当我们将代码文件拷贝给别人时，如果只拷贝了package.json文件，可以使用命令npm install会直接安装package.json下的所有依赖 yarn yarn解决了npm的一些缺陷！ ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:5:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"yarn 安装 在有了npm的基础上这个就很简单了 使用npm安装npm install -g yarn 查看版本：yarn --version 淘宝源安装： 分别运行一下两行命令： yarn config set registry https://registry.npm.taobao.org -g yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g 成功提示：success Set \"registry\" to \"https://registry.npm.taobao.org\". ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:6:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"yarn的基本使用 yarn init：初始化项目 同npm init，执行输入信息后，会生成package.json文件 yarn install：安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock yarn install --flat：安装一个包的单一版本 yarn install --force ：强制重新下载所有包 yarn install --production：只安装dependencies里的包 yarn install --no-lockfile：不读取或生成yarn.lock yarn install --pure-lockfile：不生成yarn.lock yarn add [package]： 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中 yarn add [package]@[version]：安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数 yarn add [package]@[tag] ：安装某个tag（比如beta,next或者latest） yarn add --dev/-D： 加到 devDependencies yarn add --peer/-P ：加到 peerDependencies yarn add --optional/-O ：加到 optionalDependencies ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:7:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["工具"],"content":"yarn的优点 速度快 安装版本统一 更简洁的输出 多注册来源处理 更好的语义化 ","date":"2022-06-09","objectID":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/:8:0","tags":["NodeJS","npm","yarn"],"title":"npm基本命令","uri":"/npm%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"},{"categories":["技术"],"content":"进程和线程的区别","date":"2022-06-08","objectID":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/","tags":["操作系统"],"title":"进程和线程的区别","uri":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"categories":["技术"],"content":"经典面试题 进程与线程之间有什么区别？ 扩展 什么是缓冲区溢出？ 进程之间如何进行交互？ 线程之间如何进行交互？ 面试时不可避免会被问到这个问题，Milo将自己的理解记录一下。 ","date":"2022-06-08","objectID":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/:1:0","tags":["操作系统"],"title":"进程和线程的区别","uri":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"categories":["技术"],"content":"类比理解 1.计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。 2.假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。 3.进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。 4.一个车间里，可以有很多工人。他们协同完成一个任务。 5.线程就好比车间里的工人。一个进程可以包括多个线程。 6.车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。 7.可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。 8.一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫\"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。 9.还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。 10.这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做\"信号量\"（Semaphore），用来保证多个线程不会互相冲突。 不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。 11.操作系统的设计，因此可以归结为三点： 以多进程形式，允许多个任务同时运行； 以多线程形式，允许单个任务分成不同的部分运行； 提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。 ","date":"2022-06-08","objectID":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/:2:0","tags":["操作系统"],"title":"进程和线程的区别","uri":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"categories":["技术"],"content":"面试回答 进程是程序在执行过程中分配和管理资源的基本单位，每一个进程都有自己的地址空间，至少有5种基本状态：初始态、执行态、等待状态、就需状态和终止状态 线程是CPU调度和分派的基本单位，它可与同属一个进程的其他线程共享进程所拥有的全部资源 联系 线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程 区别 进程是操作系统分配和管理资源的基本单位，线程是任务调度和执行的基本单位 进程有独立的地址空间，而线程只能共享所属进程的资源 进程之间的切换开销大，线程之间的切换开销小 线程是为了在系统层面实现并发，提高硬件利用率 进程是为隔离资源，保障一些资源崩溃了后被回收，不影响其他程序 扩展 缓冲区溢出：我们有个地方要输入用户名，本来是用来存数据的地方。 然后黑客把数据输入的特别长。这个长度超出了我们给数据存储的内存区，这时候跑到了 我们给程序分配的一部分内存中。黑客就可以通过这种办法将他所要运行的代码 写入到用户名框中，来植入进来。我们的解决方法就是，用用户名的长度来限制不要超过 用户名的缓冲区的大小来解决。 进程之间通过TCP/IP的端口来进行交互 线程的通信就比较简单，有一大块共享的内存，只要大家的指针是同一个就可以看到各自的内存 ","date":"2022-06-08","objectID":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/:3:0","tags":["操作系统"],"title":"进程和线程的区别","uri":"/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"categories":["工具"],"content":"Git基本命令","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":" Quote 笔记来源 小丞前端日记 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:0:0","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"引言 Git 作为目前最强大的代码管理工具，相信大家都很熟悉了。它在我们的日常工作中起着至关重要的作用，我们可以用它来实现多人开发。也可以用来方便我们自己，在我们坐车的时候，可以用手机看看自己刚刚上传的代码。这些都是不错的选择，下面我们就结合场景来学习一下 Git 的基本命令 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"场景实战 我们的第一个任务是：将代码提交到 Gitee / Github 远程仓库中 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"1. 创建远程代码仓库 首先我们需要创建一个远程仓库，这里我选择的是 Gitee ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:1","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"2. 全局设置 Git 在使用 Git 之前，我们需要设置用户名和邮箱，以方便记录代码的提交者是谁 用户名 git config --global user.name \"your_username\" 邮箱 git config --global user.email \"your_email\" ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:2","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"3. 创建本地代码仓库 在配置好全局设置后，我们可以新建一个文件夹，用来当作本地代码仓库 建好文件夹后，我们需要初始化代码仓库 git init 这时候在这个文件夹下就会创建一个隐藏的 .git 文件，这样就创建好了 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:3","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"4. 暂存文件 这时候我们在当前文件夹下创建一个文件 touch README.md 然后随意添加点文件内容 将修改的文件保存到暂存区 git add . . 表示目录下的全部文件，也就是提交所有 如果只想上传某个可以这样 git add README.md ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:4","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"5. 提交修改 将文件保存到暂存区之后，我们需要将文件提交到本地仓库 git commit -m \"first commit\" 引号内容是我们此次提交的注释，解释这次提交修改的内容之类的 在某些考核的过程中，可能会限制代码提交的次数 我们可以将此次的修改加到上一次提交中 git commit --amend ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:5","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"6. 与远程仓库建立连接 在推送代码之前我们需要与远程仓库建立连接，不然本地参考怎么知道上传到哪里呢？ git remote add origin 仓库地址 仓库地址在 Gitee 上可以查看 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:6","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"7. 推送代码 在提交代码到本地仓库后，我们需要将它推送到远程仓库中 git push -u origin master 注意：第一次推送分支时，加上 -u ，在推送分支内容的同时，会与远端的分支关联起来，下次提交不需 -u 可以直接 git push origin master ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:7","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"8. 查看远程仓库 这时候我们可以在远程仓库上，看到自己刚刚上传的代码 这样我们就完成了我们的第一个任务，上传代码 接收第二个任务，现在我们的项目有两个开发人员，我们需要创建一个分支，用于平时的开发 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:8","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"9. 创建分支 创建分支可以保证各个功能的相对独立，不用一起修改同个分支的代码文件 我们可以先查看当前仓库下的所有分支 git branch 创建一个 dev 分支 git branch dev 切换到 dev 分支 git checkout \"dev\" 以上的分支操作，还可以采用其他的方法 创建分支并切换到该分支 git checkout -b \"分支名\" 也可以采用 switch （推荐） git switch -c \"分支名\" 切换分支也可以采用 switch git switch 分支名 然后我们可以通过切换到 dev 分支上，进行正常的提交推送，就像这样 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:9","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"10. 合并分支 平时我们在 dev 分支上开发，到一定时候是，我们需要将我们的分支合并到主干分支上 首先需要切换到 master 分支 git checkout master 然后合并 dev 分支 git merge dev 合并完成后要 push 到远程仓库 git push origin master ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:10","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"11. 删除分支 当我们不再需要这个分支时，我们就可以删除它 git branch -D 分支名 这只是删除了本地的分支 我们还要删除远程仓库的分支 git push origin --delete 分支名 此时已删除成功 我们成功的学会了第二个任务，现在你的同事推送了代码我们需要同步一下 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:11","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"12. 拉取代码 直接拉取就好了 git pull 在我们多人开发的过程中，上传代码前一定要先拉取远程仓库的代码 以上就是一个拉取上传的完整操作了 下面是一些其他的命令，可以结合使用 ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:12","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["工具"],"content":"13. 其他命令 1. 查看文件状态 git status 2. 查看提交历史记录 git log 3. 代码回滚 版本号可以在 gitee 上看到，也可以在 log 中看到 git checkout 版本号 4. 克隆项目 git clone 地址 指定克隆下来的文件位置 git clone git地址 '文件存放路径' 5. 储藏修改 把本地修改储藏起来，等恢复后再继续工作 git stash 6. 查看储藏信息 git stash list 7. 恢复储藏信息 git stash apply 8. 删除储藏内容 git stash drop ","date":"2022-06-06","objectID":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:13","tags":["Git"],"title":"Git基本命令","uri":"/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["前端"],"content":"Javascript中的高阶函数","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"高阶函数是指以函数作为参数的函数，并且可以将函数作为结果返回的函数。 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:0:0","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"1. 高阶函数 接受一个或多个函数作为输入 输出一个函数 至少满足以上一个条件的函数 在js的内置对象中同样存在着一些高阶函数，像数组的map，filter，reduce方法等，它们接受一个函数作为参数，并应用这个函数到列表的每一个元素 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:1:0","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"1.1 map map方法接收一个函数作为参数 ，遍历数组，并且返回一个新的数组，新的数组里的每个元素都执行map传入的函数。 let arr = [1, 2, 3, 4]; let arr1 = arr.map(item =\u003e item * 2) console.log(arr1);// [2, 4, 6, 8] 返回的是一个新数组arr1，==不改变原数组== 注意：如果传入的参数没有返回值，则数组的每一项都会是undefind 经典题目 console.log(['1','2','3'].map(parseInt)); 来看看上面这个代码输出什么 答案：[1, NaN, NaN] 解析 parseInt() 函数可解析一个字符串，并返回一个整数。 基数radix可选2到36之间的整数，当参数 radix 的值为 0，或没有设置该参数时，parseInt()会根据该字符串来判断数字的基数。 当忽略参数 radix , 默认的基数如下: 如果 字符串 以 “0x” 开头，parseInt() 会把 其余部分解析为十六进制的整数。 如果字符串以 0 开头，把其余部分解析为八进制或十六进制的数字。 如果字符串以 1 ~ 9 的数字开头，parseInt()将把它解析为十进制的整数 如果基数小于2或大于36，或者第一个非空白字符不能转换为数字，则返回NaN。 注意：基数可不是默认十进制 当我们把数组传入parseInt时，由于接收2个参数，会将数组的索引作为基数传给parseInt，所以实质上进行的是以下几步 parseInt('1', 0) parseInt('2', 1) parseInt('3', 2) 第一个parseInt，字符串为1，基数为0 被默认为十进制，所以返回1 第二个和第三个，因为基数不是0，且小于2，所以parseInt()会返回 NaN。 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:1:1","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"1.2 filter 用于筛选数组 filter方法接收一个函数作为参数，通过这个函数来指定筛选数组的规则，最后返回满足规则的新数组 在传入的函数中有3个参数可选 参数 描述 currentValue 必须。当前元素的值 index 可选。当前元素的索引值 arr 可选。当前元素属于的数组对象 注意： 不会检测空数组 不会改变原始数组 let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] let arr1 = arr.filter(num =\u003e { return num \u003e 5 }) console.log(arr1);// [6, 7, 8, 9] ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:1:2","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"1.3 reduce reduce能做的事情很多，但是我们平时都使用for循环之类的方法代替了，但是reduce真的高逼格 array.reduce(function(total, currentValue, currentIndex, arr), initialValue) 以上是在w3school中给出的reduce语法，这里我们常用的只有前面两个 参数 描述 total 必需。初始值, 或者计算结束后的返回值。 currentValue 必需。当前元素 let arr = [1, 2, 3, 4] let sum = arr.reduce((value, item) =\u003e { console.log(value, item); // 1 2 3 3 6 4 return value + item }) console.log(sum);// 10 从第四行的调试中可以看出reduce函数的执行过程，在没有初始值的情况下，将数组第一个值作为value第二个值作为item再依次往下遍历整个数组，将返回值作为value，数组的下一位作为item，直至遍历完成。 利用ruduce实现数组去重 let arr = [1,1,2,3,4,2,5,4]; let unique = arr.reduce(function (prev, item) { prev.indexOf(item) === -1 \u0026\u0026 prev.push(item); return prev; }, []); console.log(unique); // [1, 2, 3, 4, 5] 通过将空数组作为prev初始值 再通过indexOf判断数组中是否包含item，如果该元素不存在就返回-1， \u0026\u0026运算符第一条语句为true，则执行第二条，否则不执行 prev.push(item) 将item加入prev数组，最终返回数组prev 注意： indexOf()方法返回在数组中可以找到给定元素的第一个索引，如果该元素不存在，则返回-1。 关于\u0026\u0026运算符，第一条语句为true则执行第二条，否则不执行 ruduce的用法远不止这些，有兴趣的可以再了解以下~ 还有很多内置对象都是高阶函数，这里就不一一说明了，从上面的三个方法中，已经能很直观的感受到了函数接收函数作为参数，再返回值的过程，逼格很高也很好用 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:1:3","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"2. AOP面向切面编程 当我们需要使用一个公共函数，并且需要在这个函数执行前后添加自己的逻辑，通常我们的做法不能是直接修改这个函数，因为它是==公共函数==，这时候我们可以通过AOP的方法利用高阶函数和原型链的特点进行处理 把一些与业务无关的功能抽离出来，通过\"动态植入\"的方法，掺入到业务逻辑模块中。这样做的好处是保证业务逻辑模块的纯净和高内聚，其次可以方便的复用功能模块 需求：实现在函数==执行前==输出提示信息 这是一个函数 function say(who) { console.log(who + '：函数执行了'); } 实现在函数==执行前==输出提示信息 Function.prototype.before = function(callback) { return (...args) =\u003e { callback() this(...args) } } let whoSay = say.before(function() { console.log('你要被调用了'); }) whoSay('Milo') // 你要被调用了 // Milo：函数执行了 如果需要实现==后置通知==，只需要将callback()和this(…args)调换一下就可以了 Function.prototype.before = function(callback) { return (...args) =\u003e { this(...args) callback() } } // Milo：函数执行了 // 你要被调用了 实现的原理 在调用公共函数时，传入我们需要执行提前执行的函数，在内部函数执行前先调用该函数 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:2:0","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"3.偏函数 当一个函数有很多参数时，调用该函数就需要提供多个参数，如果可以减少参数的个数，就能简化该函数的调用，降低调用该函数的难度。 实现3个数求和 function sum(a, b, c){ return a + b + c; } console.log(sum(1, 2, 3)) // 6 在调用时我们需要传入3个参数，好像有些许麻烦，下面我们用偏函数的做法 创建一个新的partial函数，这个新函数可以固定住原函数的部分参数，从而减少调用时的输入的参数，让我们的调用更加简单 function sum(a, b, c) { return a + b + c } function partial(sum, c) { return function (a, b) { return sum(a, b, c) } } let partialSum = partial(sum, 3) console.log(partialSum(1,2))// 6 高阶函数除了可以接收函数作为参数外，还可以将函数作为结果返回，偏函数就是固定了函数的一个或多个参数，返回一个新的函数接收剩下的参数，以此来简化函数的调用。 Function.prototype.bind 函数就是一个偏函数的典型代表，它接受的第二个参数开始，为预先添加到绑定函数的参数列表中的参数 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:3:0","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"4. 函数柯里化 与偏函数不同，柯里化是把接收多个参数的函数转换成多个只接收一个参数的函数。 我们从一个简单的例子来认识函数柯里化 function add(a, b) { return a + b; } add(1, 2) // 3 普通做法 一次传入两个参数 // 假设有一个 curring 函数可以做到柯里化 function curring(){} curring(1)(2) // 我们通过这样的方式来接受参数，这样就实现了柯里化 接下来我们来看看利用柯里化来实现 function curring(x) { return return y =\u003e x + y } curring(1)(2) // =\u003e 3 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:4:0","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"4.1 函数柯里化的作用 要真正理解柯里化还是得看示例 4.1.1 参数复用 我们先看一段短短的代码，这段代码中，实现了输入输出个人信息的功能，通过myInfo函数将参数拼接返回，这实际上很简单，但是当有很多很多的用户信息时，需要一直传递着个人信息这个参数，这样显然是不合理的 function myInfo(inf, name, age) { return `${inf}：${name},${age}` } const myInfo1 = myInfo('个人信息', 'milo', '19') console.log(myInfo1); // 个人信息：milo,19 下面我们通过柯里化技术来解决 function myInfoCurry(inf) { return (name, age) =\u003e { return `${inf}：${name}${age}` } } let myInfoName = myInfoCurry('个人信息') const myInfo1 = myInfoName('milo', '19') const myInfo2 = myInfoName('Mmmy','19') console.log(myInfo2); // 个人信息：milo,19 console.log(myInfo1); // 个人信息：Mmmy,19 这个就是柯里化技术的作用之一了，参数复用，个人感觉还是很好用的 在上面代码的基础上，我们可以继续扩展我们的信息，就像这样，利用一个函数就可以实现多个功能 let myInfoHobby = myInfoCurry('爱好') const myInfo3 = myInfoHobby('看球赛','听歌') console.log(myInfo3); // 爱好：看球赛听歌 4.1.2 提前返回 这个特性是用来对浏览器的监听事件兼容性做一些判断并初始化，解决有些浏览器对addEventListener存在的兼容性问题，所以在使用之前做一次判断，之后就可以省略了 const whichEvent = (function () { if (window.addEventListener) { return function (ele, type, listener, useCapture) { ele.addEventListener(type, function (e) { listener.call(ele, e) }, useCapture) } } else if (window.attachEvent) { return function (ele, type, handler) { ele.attachEvent('on' + type, function (e) { handler.call(ele, e) }) } } })() 由于使用了立即执行函数，即使触发多次事件依旧只会触发一次if条件判断 4.1.3 延迟执行 下面我们通过一道例题来了解 编写一个add函数实现下面的功能 add(1)(2)(3) = 6 add(1, 2, 3)(4) = 10 add(1)(2)(3)(4)(5) = 15 function add(...args) { let inner = function () { args.push(...arguments); inner.toString = function () { return args.reduce((prev, cur) =\u003e { return prev + cur }) } return inner } return inner } console.log(add(1)(2)(3)); // f console.log(add(1)(2)(3).toString()); // 6 这段代码中涵盖的知识面很多，核心的部分在于inner.toString这里，利用了当返回一个函数时返回的是它的字符串形式，所以我们可以利用这个特性来自定义我们的返回值 ","date":"2022-06-05","objectID":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/:4:1","tags":["前端","JS"],"title":"Javascript中的高阶函数","uri":"/javascript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"categories":["前端"],"content":"JS从入门到精通","date":"2022-06-03","objectID":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/","tags":["前端","JS"],"title":"JS从入门到精通","uri":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"介绍 此项目为Milo在学习JS的过程中记录的笔记和源码，视频看的是B站上硅谷李立超老师的JavaScript基础，笔记参考了vectorX大佬的学习笔记，综合整理了笔记、源码code和相关面试题，面试题后面会持续更新，也会单独建立一个项目。另额外学习了JS高阶的内容如JS高阶函数、闭包、作用域链等..也会持续更新！ ","date":"2022-06-03","objectID":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:1:0","tags":["前端","JS"],"title":"JS从入门到精通","uri":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"其他地址 Github：https://github.com/Milo980412/NOTE_JS 语雀：https://www.yuque.com/u26476221/my897g Milo前端日记：JavaScript入门学习 ","date":"2022-06-03","objectID":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:2:0","tags":["前端","JS"],"title":"JS从入门到精通","uri":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"目录 JS基础 01_JS 简介 02_JS基础 03_JS运算 04_流程控制05-对象 06_函数 07_作用域 08_构造函数与原型对象 09_数组 10_call, apply 和 arguments 11_Date和Math 12_包装类和字符串 13_正则表达式 14_DOM 15_事件对象 16_滚轮事件与键盘事件 17_BOM 18_定时调用与延时调用 19_JSON JS高阶 JS高阶函数 ","date":"2022-06-03","objectID":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:3:0","tags":["前端","JS"],"title":"JS从入门到精通","uri":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"参考 视频链接 尚硅谷最新版JavaScript基础全套教程完整版(140集实战教学,JS从入门到精通) 笔记参考 来自vectorX大佬的学习笔记 ","date":"2022-06-03","objectID":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/:4:0","tags":["前端","JS"],"title":"JS从入门到精通","uri":"/js%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"},{"categories":["前端"],"content":"JS从入门到精通","date":"2022-05-15","objectID":"/htmlcss/","tags":["前端","HTML","CSS"],"title":"HTML\u0026CSS","uri":"/htmlcss/"},{"categories":["前端"],"content":"介绍 此项目为Milo学习HTML过程中记录的笔记和源码，视频看的B站尚硅谷李立超老师的HTML\u0026CSS视频，笔记参考vectorX大佬的学习笔记，综合整理了笔记、源码code和相关面试题，面试题后面会持续更新，也会单独建立一个项目 ","date":"2022-05-15","objectID":"/htmlcss/:1:0","tags":["前端","HTML","CSS"],"title":"HTML\u0026CSS","uri":"/htmlcss/"},{"categories":["前端"],"content":"其他地址 Github：https://github.com/Milo980412/NOTE_HTML-CSS 语雀：https://www.yuque.com/u26476221/cr1daz Milo前端日记：HTML\u0026CSS ","date":"2022-05-15","objectID":"/htmlcss/:2:0","tags":["前端","HTML","CSS"],"title":"HTML\u0026CSS","uri":"/htmlcss/"},{"categories":["前端"],"content":"目录 01_前端简介.md 02_前端开发准备.md 03_字符实体与语义标签.md 04_CSS语法与选择器.md 05_样式继承与其他概念.md 06_盒模型.md 07_实战练习.md 08_盒模型补径场实战.md 09_浮动.md 10_高度塌陷与BFC.md 11 定位.md 12_字体.md 13_背景.md 14雪碧图与渐变.md 15_表格.md 16_过渡与动画.md 17_变形:平转与缩放.md 18_less 简介.md 19_弹性盒简介.md 20_像素与视口.md 21_媒体查询.md ","date":"2022-05-15","objectID":"/htmlcss/:3:0","tags":["前端","HTML","CSS"],"title":"HTML\u0026CSS","uri":"/htmlcss/"},{"categories":["前端"],"content":"参考 学习视频 尚硅谷Web前端零基础入门HTML5+CSS3基础教程丨初学者从入门到精通 笔记参考 来自vectorX大佬的学习笔记 ","date":"2022-05-15","objectID":"/htmlcss/:4:0","tags":["前端","HTML","CSS"],"title":"HTML\u0026CSS","uri":"/htmlcss/"},{"categories":["前端"],"content":"前端学习计划","date":"2022-05-01","objectID":"/frontend/","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"1 HTML、CSS（尚硅谷超哥） 视频链接：尚硅谷Web前端零基础入门HTML5+CSS3基础教程丨初学者从入门到精通 ","date":"2022-05-01","objectID":"/frontend/:0:1","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"2 JavaScript（尚硅谷超哥） 视频链接：尚硅谷JavaScript基础\u0026实战丨JS入门到精通全套完整版 ","date":"2022-05-01","objectID":"/frontend/:0:2","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"3 JavaScript进阶高级部分（尚硅谷）[可跳过] 视频链接：https://www.bilibili.com/video/BV14s411E7qf ⚠️注意：可以先不看这一块，直接看React，后面补js高级 ","date":"2022-05-01","objectID":"/frontend/:0:3","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"4 React（尚硅谷天禹）[看P1-P64集] 视频链接：尚硅谷React技术全家桶全套完整版（零基础入门到精通/男神天禹老师亲授） ⚠️注意：P64集以后需要Ajax、Promis、axios等知识。 ","date":"2022-05-01","objectID":"/frontend/:0:4","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"5 Ajax入门到精通（尚硅谷） 视频链接：https://www.bilibili.com/video/BV1WC4y1b78y ","date":"2022-05-01","objectID":"/frontend/:0:5","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"6 Promise（尚硅谷） 视频链接：尚硅谷Web前端Promise教程从入门到精通 ","date":"2022-05-01","objectID":"/frontend/:0:6","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"7 axios入门与源码解析（尚硅谷） 视频链接：尚硅谷Web前端axios入门与源码解析 ","date":"2022-05-01","objectID":"/frontend/:0:7","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"8 React（尚硅谷天禹）[接着看P65-P141集] 视频链接：尚硅谷React技术全家桶全套完整版（零基础入门到精通/男神天禹老师亲授） ","date":"2022-05-01","objectID":"/frontend/:0:8","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"9 ES6（尚硅谷） 视频链接：https://www.bilibili.com/video/BV1uK411H7on ⚠️注意：ES6需要先学习js基础、js高级、Promise等内容 ","date":"2022-05-01","objectID":"/frontend/:0:9","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"10 NodeJS（尚硅谷） 视频链接：https://www.bilibili.com/video/BV1bs411E7pD ","date":"2022-05-01","objectID":"/frontend/:0:10","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"11 Webpack（尚硅谷） 视频链接：https://www.bilibili.com/video/BV1e7411j7T5 ","date":"2022-05-01","objectID":"/frontend/:0:11","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":["前端"],"content":"12 Git（尚硅谷）[可以先会用再仔细看] 视频链接：https://www.bilibili.com/video/BV15J411973T ","date":"2022-05-01","objectID":"/frontend/:0:12","tags":["前端","HTML","CSS","JS","Git","NodeJS","ES6","Ajax","axios","Promise","React","Webpack"],"title":"前端学习计划","uri":"/frontend/"},{"categories":null,"content":"👋 𝑯𝒊 𝒕𝒉𝒆𝒓𝒆, 𝑾𝒆𝒍𝒄𝒐𝒎𝒆 𝒕𝒐 𝑴𝒚 𝑩𝒍𝒐𝒈! 𝑴𝒚 𝒏𝒂𝒎𝒆 𝒊𝒔 𝑴𝒊𝒍𝒐 🤝 𝑰 𝒂𝒎 𝒂 𝑾𝒆𝒃 𝑭𝒓𝒐𝒏𝒕-𝒆𝒏𝒅 𝑫𝒆𝒗𝒆𝒍𝒐𝒑𝒆𝒓 𝒇𝒓𝒐𝒎 𝑪𝒉𝒊𝒏𝒂 𝘼𝙗𝙤𝙪𝙩 𝙢𝙚 🏫 𝑺𝙝𝒂𝒏𝒈𝙝𝒂𝒊 𝑼𝒏𝒊𝒗𝒆𝒓𝒔𝒊𝒕𝒚 𝑶𝒇 𝑬𝒏𝒈𝒊𝒏𝒆𝒆𝒓𝒊𝒏𝒈 𝑺𝒄𝒊𝒆𝒏𝒄𝒆. 🏠 𝑩𝒂𝒔𝒆 𝑺𝙝𝒂𝒏𝒈𝙝𝒂𝒊, 𝒍𝒐𝒐𝒌𝒊𝒏𝒈 𝒇𝒐𝒓 𝒊𝒏𝒕𝒆𝒓𝒏𝒔𝒉𝒊𝒑 𝒐𝒑𝒑𝒐𝒓𝒕𝒖𝒏𝒊𝒕𝒊𝒆𝒔. 💼 𝑭𝒓𝒐𝒏𝒕𝑬𝒏𝒅 𝒆𝒏𝒕𝒉𝒖𝒔𝒊𝒂𝒔𝒕𝒔 𝒂𝒓𝒆 𝒌𝒆𝒆𝒏 𝒕𝒐 𝒘𝒓𝒊𝒕𝒆 𝒉𝒊𝒈𝒉-𝒒𝒖𝒂𝒍𝒊𝒕𝒚 𝒄𝒐𝒅𝒆. ❤️ 𝑰 𝒍𝒊𝒌𝒆 𝒕𝒐 𝒖𝒔𝒆 𝑻𝒚𝒑𝒆𝑺𝒄𝒓𝒊𝒑𝒕 𝒂𝒏𝒅 𝑹𝒆𝒂𝒄𝒕 𝒄𝒐𝒎𝒃𝒊𝒏𝒆𝒅 𝒘𝒊𝒕𝒉 𝑨𝒏𝒕 𝑫𝒆𝒔𝒊𝒈𝒏 𝒅𝒆𝒗𝒆𝒍𝒐𝒑𝒎𝒆𝒏𝒕 𝒑𝒓𝒐𝒋𝒆𝒄𝒕𝒔, 𝒂𝒏𝒅 𝒏𝒐𝒘 𝒔𝒐𝒎𝒆 𝒂𝒓𝒆 𝒆𝒙𝒑𝒍𝒐𝒓𝒊𝒏𝒈 𝒏𝒆𝒘 𝑼𝑰 𝒍𝒊𝒃𝒓𝒂𝒓𝒊𝒆𝒔. 💻 𝑪𝒐𝒅𝒊𝒏𝒈 𝒊𝒔 𝒎𝒚 𝒑𝒂𝒔𝒔𝒊𝒐𝒏. Milo ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"我 本科：上海工程技术大学 计算机科学与技术 硕士：上海工程技术大学 电子信息 研究方向-知识图谱、推荐系统 ","date":"0001-01-01","objectID":"/about/:0:1","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"Tags 爱打篮球、踢足球 喜欢吉他弹唱 前端开发 喜欢玩CSGO 不抽烟不喝酒不蹦迪 ","date":"0001-01-01","objectID":"/about/:0:2","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"技术评级 英语四六级 HTML\u0026CSS 入门 Less 了解 Javascript 入门 TS 了解 ES6 入门 NodeJs 入门 Wepack 入门 React 入门 Python 入门 Java 业余 Languages and Tools: ","date":"0001-01-01","objectID":"/about/:0:3","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"各位留个友链格式如下： name = Milo url = https://wcmsues.github.io logo = https://wcmsues.github.io/images/aniya.webp word = 无比热爱，来日方长！ Yulin Lewis \"不想当写手的码农不是好咸鱼_(xз」∠)_\" 李立超 \"前端我超哥!\" 小丞的前端日记 \"无比热爱，来日方长!\" zsqw123 \"岳女士 yyds\" 东南dnf \"周顺大弟子\" dextercai \"Helo.😄\" ","date":"0001-01-01","objectID":"/friends/:0:0","tags":null,"title":"友链墙","uri":"/friends/"},{"categories":null,"content":"感谢投喂～💗 支付宝 微信 ","date":"0001-01-01","objectID":"/donate/:0:1","tags":null,"title":"赞赏","uri":"/donate/"}]